package codionics.db

import com.datastax.oss.driver.api.core.CqlIdentifier
import com.datastax.oss.driver.api.core.cql.SimpleStatement
import com.datastax.oss.driver.api.querybuilder.QueryBuilder
import com.datastax.oss.driver.api.querybuilder.QueryBuilder._
import com.datastax.oss.driver.api.querybuilder.insert.RegularInsert
import com.datastax.oss.driver.api.querybuilder.select.Select
import com.datastax.oss.driver.api.querybuilder.term.Term
import com.datastax.oss.driver.api.querybuilder.update.Assignment
import com.datastax.oss.driver.api.querybuilder.update.Update

import scala.jdk.CollectionConverters._

trait QueryHelper {

  protected def selectAll(tableName: String): Select = selectFrom(tableName).all()

  protected def selectAllQuery(tableName: String): SimpleStatement = selectAll(tableName).build()

  protected def selectCountQuery(tableName: String): String = s"SELECT COUNT(*) FROM $tableName"

  protected def selectByPkColumnQuery(tableName: String, pkColumnName: String): SimpleStatement =
    selectAll(tableName).whereColumn(pkColumnName).isEqualTo(bindMarker()).build()

  protected def getInsertQuery(
      tableName: String,
      pkColumnName: String,
      isPKAutoGenerated: Boolean,
      data: Map[String, Any]
  ): RegularInsert = {
    val insertMap =
      if (isPKAutoGenerated && data.contains(pkColumnName)) data - pkColumnName
      else data

    val cqlMap = insertMap
      .map { case (k, v) => CqlIdentifier.fromInternal(k) -> literal(v) }
      .asInstanceOf[Map[CqlIdentifier, Term]]

    var insertStmt = insertInto(tableName)

    var withPK =
      if (isPKAutoGenerated) insertStmt.value(pkColumnName, bindMarker())
      else insertStmt

    withPK.valuesByIds(cqlMap.asJava)
  }

  protected def getUpdateQuery(tableName: String, pkColumnName: String, data: Map[String, Any]): Update = {
    val updateMap =
      if (data.contains(pkColumnName)) data - pkColumnName
      else data

    var updateStmt = QueryBuilder.update(CqlIdentifier.fromInternal(tableName))

    val updateAssignmnts = updateMap.map { case (k, v) => Assignment.setColumn(k, literal(v)) }.asJava
    var withAssignments  = updateStmt.set(updateAssignmnts)

    val pkColValue = data.get(pkColumnName)
    withAssignments.whereColumn(pkColumnName).isEqualTo(literal(pkColValue.get))
  }

  protected def deleteQuery(tableName: String, pkColumnName: String): SimpleStatement =
    deleteFrom(tableName).whereColumn(pkColumnName).isEqualTo(bindMarker()).build()
}
