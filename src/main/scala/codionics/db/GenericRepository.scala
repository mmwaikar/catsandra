package codionics.db

import cats.data.Kleisli
import cats.effect.IO
import com.datastax.oss.driver.api.core.CqlIdentifier
import com.datastax.oss.driver.api.core.CqlSession
import com.datastax.oss.driver.api.core.cql.AsyncCqlSession
import com.datastax.oss.driver.api.core.cql.AsyncResultSet
import com.datastax.oss.driver.api.core.cql.ResultSet
import com.datastax.oss.driver.api.core.cql.Row
import com.datastax.oss.driver.api.core.cql.SimpleStatement
import com.datastax.oss.driver.api.querybuilder.QueryBuilder
import com.datastax.oss.driver.api.querybuilder.QueryBuilder._
import com.datastax.oss.driver.api.querybuilder.insert.InsertInto
import com.datastax.oss.driver.api.querybuilder.insert.RegularInsert
import com.datastax.oss.driver.api.querybuilder.select.Select
import com.datastax.oss.driver.api.querybuilder.term.Term
import com.datastax.oss.driver.api.querybuilder.update.Assignment
import com.datastax.oss.driver.api.querybuilder.update.Update

import scala.collection.mutable.Buffer
import scala.jdk.CollectionConverters._

trait GenericRepository[TPK] {

  def tableName: String

  def pkColumnName: String

  def isPKAutoGenerated: Boolean

  def getAll: Kleisli[IO, CqlSession, Seq[Map[String, Any]]]

  def getByPK(pk: TPK): Kleisli[IO, CqlSession, Option[Map[String, Any]]]

  def getCount: Kleisli[IO, CqlSession, Long]

  def getByQuery(query: String): Kleisli[IO, CqlSession, Seq[Map[String, Any]]]

  def insert(data: Map[String, Any]): Kleisli[IO, CqlSession, Option[Map[String, Any]]]

  def update(data: Map[String, Any]): Kleisli[IO, CqlSession, Option[Map[String, Any]]]

  def delete(pk: TPK): Kleisli[IO, CqlSession, Unit]

  // protected def selectAll: Select = selectFrom(tableName).all()

  // protected def selectAllQuery: SimpleStatement = selectAll.build()

  // protected def selectCountQuery: String = s"SELECT COUNT(*) FROM $tableName"

  // protected def selectByPkColumnQuery: SimpleStatement =
  //   selectAll.whereColumn(pkColumnName).isEqualTo(bindMarker()).build()

  // protected def getInsertQuery(data: Map[String, Any]): RegularInsert = {
  //   val insertMap =
  //     if (isPKAutoGenerated && data.contains(pkColumnName)) data - pkColumnName
  //     else data

  //   val cqlMap = insertMap
  //     .map { case (k, v) => CqlIdentifier.fromInternal(k) -> literal(v) }
  //     .asInstanceOf[Map[CqlIdentifier, Term]]

  //   var insertStmt = insertInto(tableName)

  //   var withPK =
  //     if (isPKAutoGenerated) insertStmt.value(pkColumnName, bindMarker())
  //     else insertStmt

  //   withPK.valuesByIds(cqlMap.asJava)
  // }

  // protected def getUpdateQuery(data: Map[String, Any]): Update = {
  //   val updateMap =
  //     if (data.contains(pkColumnName)) data - pkColumnName
  //     else data

  //   var updateStmt = QueryBuilder.update(CqlIdentifier.fromInternal(tableName))

  //   val updateAssignmnts = updateMap.map { case (k, v) => Assignment.setColumn(k, literal(v)) }.asJava
  //   var withAssignments  = updateStmt.set(updateAssignmnts)

  //   val pkColValue = data.get(pkColumnName)
  //   withAssignments.whereColumn(pkColumnName).isEqualTo(literal(pkColValue.get))
  // }

  // protected def deleteQuery: SimpleStatement =
  //   deleteFrom(tableName).whereColumn(pkColumnName).isEqualTo(bindMarker()).build()
}
