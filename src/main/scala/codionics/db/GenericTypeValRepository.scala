package codionics.db

import cats.data.Kleisli
import cats.effect.IO
import codionics.domain._
import com.datastax.oss.driver.api.core.CqlIdentifier
import com.datastax.oss.driver.api.core.CqlSession
import com.datastax.oss.driver.api.core.cql.AsyncCqlSession
import com.datastax.oss.driver.api.core.cql.AsyncResultSet
import com.datastax.oss.driver.api.core.cql.ResultSet
import com.datastax.oss.driver.api.core.cql.Row
import com.datastax.oss.driver.api.core.cql.SimpleStatement
import com.datastax.oss.driver.api.querybuilder.QueryBuilder
import com.datastax.oss.driver.api.querybuilder.QueryBuilder._
import com.datastax.oss.driver.api.querybuilder.insert.InsertInto
import com.datastax.oss.driver.api.querybuilder.insert.RegularInsert
import com.datastax.oss.driver.api.querybuilder.select.Select
import com.datastax.oss.driver.api.querybuilder.term.Term
import com.datastax.oss.driver.api.querybuilder.update.Assignment
import com.datastax.oss.driver.api.querybuilder.update.Update

import scala.collection.mutable.Buffer
import scala.jdk.CollectionConverters._

trait GenericTypeValRepository[TPK] {

  def tableName: String

  def pkColumnName: String

  def isPKAutoGenerated: Boolean

  def getAll: Kleisli[IO, CqlSession, Seq[Map[String, TypeVal]]]

  def getByPK(pk: TPK): Kleisli[IO, CqlSession, Option[Map[String, TypeVal]]]

  def getCount: Kleisli[IO, CqlSession, Long]

  def getByQuery(query: String): Kleisli[IO, CqlSession, Seq[Map[String, TypeVal]]]

  def insert(data: Map[String, Any]): Kleisli[IO, CqlSession, Option[Map[String, TypeVal]]]

  def update(data: Map[String, Any]): Kleisli[IO, CqlSession, Option[Map[String, TypeVal]]]

  def delete(pk: TPK): Kleisli[IO, CqlSession, Unit]

  protected def getRow(rs: ResultSet): Map[String, TypeVal] = {
    if (rs == null) Map.empty
    else {
      val columns = rs.getColumnDefinitions.asScala.map(_.getName)
      println(s"columns: $columns")
      toNameTypeValMap(rs, rs.one())
    }
  }

  protected def getRows(rs: ResultSet): List[Map[String, TypeVal]] = {
    if (rs == null) List.empty
    else {
      val columns = rs.getColumnDefinitions.asScala.map(_.getName)
      rs.all().asScala.map(row => toNameTypeValMap(rs, row)).toList
    }
  }

  protected def toNameValueMap(rs: ResultSet, row: Row): Map[String, Object] = {
    if (rs == null) Map.empty
    else {
      val columns = rs.getColumnDefinitions.asScala.map(_.getName)
      columns.map(col => (col.toString(), row.getObject(col))).toMap
    }
  }

  protected def toNameTypeValMap(rs: ResultSet, row: Row): Map[String, TypeVal] = {
    if (rs == null) Map.empty
    else {
      val nameValueMap = toNameValueMap(rs, row)
      nameValueMap.map { case (k, v) => (k, TypeVal(v.getClass.getSimpleName, v)) }
    }
  }
}
